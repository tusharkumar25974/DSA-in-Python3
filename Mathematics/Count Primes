class Solution:
    def countPrimes(self, n: int) -> int:
        if n == 0:
            return 0
        if n == 1:
            return 0
        
        primes = [1]*(n)        # not taking n+1 makes sense here as it is less than n+1
                                 #so 0 index se n-1 tak
        for i in range(1,n):
            primes[i] = 1
        primes[1] = 0
        primes[0] = 0
      
        
        m = ceil(pow(n,0.5))
        print(m)
        for i in range(2,m):
            if primes[i] == 1:
                j = i
                while i*j<n:
                #for j in range(i,m):         #m hoga i*j<= n 
                    primes[i*j] = 0
                    j+=1
        ans = 0
        for i in range(len(primes)):
            if primes[i] == 1:
                ans+=1
        return ans
            
        
        
        
'''        
        cnt = 0
        for i in range(2,n):
            
            count  = 0
            m = ceil(pow(i,0.5))
            
            for j in range(2,m):
                if i%j==0:
                    count+=1
            if count == 0:
                cnt+=1
                count =0
        return cnt
                
                
                
                
         
        
        
        
        
        
        
        
        
        
        
        
     
        #looping from 1 to n
        # checking if the no's are prime or not
        #5 -> 1, 2 , 3 , 4 , 5
        # from 2 to n
        #from 2 to sqrt(n) |  24 - 1,2,3,4, 4.xx,,6,8,12,24  --- i , N/i O(Nsqrt(N)) -- 25*10^9
        
        # 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20
            p p c p c p c c c c p  c p  c  c  c  p  c p  c
        #crossed                        #non-crossed
        
        20/2 + 20/3 + 20/5
    ....N / 2 + N/3 + N/5......
    N(1/2+1/3+.....1/19)
    N(log(logn))~ 4N
    '''
        
        
        
        
