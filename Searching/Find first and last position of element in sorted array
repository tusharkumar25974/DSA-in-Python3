class Solution:
    def searchRange(self, nums: List[int], target: int) -> List[int]:
        #self.nums = nums
        #self.target = target
        arr = []
        x = None   #This was needed coz I called within while loop which resulted in unbound local exception
        y = None
        l = 0
        #nums = self.nums
        #target = self.target
        r = len(nums)-1
        while l<=r:   
            mid = (l+r)//2
            if nums[mid] > target:
                r = mid-1
            elif nums[mid]<target:
                l = mid+1
            else:
                if (mid == len(nums)-1):
                    x =  mid
                    break
                elif (nums[mid+1]!=target):
                    x =  mid
                    break
                else:
                    l = mid+1
        l = 0
        #nums = self.nums
        #target = self.target
        r = len(nums)-1
        while l<=r:   
            mid = (l+r)//2
            if nums[mid] > target:
                r = mid-1
            elif nums[mid]<target:
                l = mid+1
            else:
                if (mid == 0):
                    y =  mid
                    break
                elif (nums[mid-1]!=target):
                    y = mid
                    break
                else:
                    r = mid-1
        
        
        
        
        
    
        #x = self.searchInsert2()
        #y = self.searchInsert()
        if x == None and y == None:
            return [-1,-1]
        
        arr.append(y)
        arr.append(x)
        
        return arr
        
    '''    
        
    def searchInsert(self) -> int:
        l = 0
        nums = self.nums
        target = self.target
        r = len(nums)-1
        while l<=r:   
            mid = (l+r)//2
            if nums[mid] > target:
                r = mid-1
            elif nums[mid]<target:
                l = mid+1
            else:
                if (mid == len(nums)-1):
                    return mid
                elif (nums[mid+1]!=target):
                    return mid
                else:
                    l = mid+1
        
    
    def searchInsert2(self) -> int:
        l = 0
        nums = self.nums
        target = self.target
        r = len(nums)-1
        while l<=r:   
            mid = (l+r)//2
            if nums[mid] > target:
                r = mid-1
            elif nums[mid]<target:
                l = mid+1
            else:
                if (mid == 0):
                    return mid
                elif (nums[mid-1]!=target):
                    return mid
                else:
                    r = mid-1
        
       ''' 
