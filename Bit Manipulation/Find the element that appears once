class Solution:
    def singleNonDuplicate(self, nums: List[int]) -> int:
        l = 0
        n = len(nums)  #yahaan galti kiya tha, jis se answer galat aa rha tha len(nums)-1
        h = len(nums)-1
        if l == h:
            return nums[0]
        while l<=h:
            m = (l+h)//2
            if m == 0:  #Why this edge case???
                if nums[m+1]!=nums[m]:
                    return nums[m]
                else:
                    l = m+1
            elif m == n-1:   #Why this edge case???
                if nums[m-1]!=nums[m]:
                    return nums[m]
                else:
                    h = m-1
            elif nums[m]!=nums[m+1] and nums[m]!=nums[m-1]:   #answer detection part
                print("check",m)
                return nums[m]
            else:                    #we are at index such that one of the left or right is equal 
                fo = -1              #First occurence   #Also initialization is important
                so = -1              #Second occurence 
                if nums[m] == nums[m+1]:
                    fo = m
                    so = m+1
                else:               #by default this means that fo is at m-1
                    fo = m-1
                    so = m  
                if fo%2==0:         #In order to decide if you are at left side or roght side of the answer
                    l = m+1     #on left isde of the answer
                else:
                    h = m-1     #on right side of the answer
                    
                    
        #Time complexity of O(log(N))
        
        #If to be done in O(N):
        '''
        ans = 0
        for i in range(N):
            ans ^= A[i]
        return ans
        '''
                    
                    
        
        
